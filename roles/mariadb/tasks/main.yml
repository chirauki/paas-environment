---
- name: Install MariaDB
  yum: name={{ item }} state=present
  with_items:
    - MariaDB-server
    - MariaDB-client
    - MySQL-python

- name: Enable MariaDB service
  service: name=mysql enabled=yes

- name: Create MariaDB root PW file
  copy:
    dest: /var/lib/mysql/.mysql_init
    content: |
      CREATE USER IF NOT EXISTS root@'%';
      UPDATE mysql.user SET password=PASSWORD('{{ mariadb_root_password }}') WHERE User='root' AND Host = 'localhost';
      UPDATE mysql.user SET password=PASSWORD('{{ mariadb_root_password }}') WHERE User='root' AND Host = '%';
      GRANT ALL PRIVILEGES ON *.* TO root@'%' WITH GRANT OPTION;
      FLUSH PRIVILEGES;
    owner: mysql
    group: mysql
  register: pwfile

- name: Reset MariaDB password
  block:
    - name: Install requirements
      yum: name=MySQL-python state=present

    - name: Set MYSQLD_OPTS
      shell: systemctl set-environment MYSQLD_OPTS="--skip-networking --init-file /var/lib/mysql/.mysql_init"

    - name: Restart MariaDB
      service: name=mysql state=restarted

    - name: Unset MYSQLD_OPTS
      shell: systemctl unset-environment MYSQLD_OPTS

    - name: Restart MariaDB
      service: name=mysql state=restarted
  when: pwfile.changed

- name: "MariaDB configuration file {{ item.key }}.cnf"
  template:
    src: cnf.j2
    dest: /etc/my.cnf.d/{{ item.key }}.cnf
  with_dict: "{{ default_mariadb_config | combine(mariadb_config) }}"

- name: Ensure /var/log/mysql folder exists
  file:
    path: /var/log/mysql
    owner: mysql
    group: mysql
    state: directory

- set_fact:
    pwdflag: "-p{{ abiquo_db_pass }}"
  when: abiquo_db_pass is defined

- set_fact:
    mysql_command: "mysql -h{{ abiquo_db_host }} -P{{ abiquo_db_port }} -u{{ abiquo_db_user }} {{ pwdflag is defined | ternary(pwdflag,'') }} "

- name: Check if WSREP is ready
  shell: "{{ mysql_command }} -Nse -Nse 'select VARIABLE_VALUE FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE  VARIABLE_NAME=\"wsrep_ready\"'"
  register: wsrep_ready

- name: Check if WSREP cluster size
  shell: "{{ mysql_command }} -Nse -Nse 'select VARIABLE_VALUE FROM INFORMATION_SCHEMA.GLOBAL_STATUS WHERE  VARIABLE_NAME=\"wsrep_cluster_size\"'"
  register: wsrep_cluster_size

- set_fact:
    galera_bootstrap: "{{ wsrep_ready.stdout == 'OFF' && wsrep_cluster_size.stdout == '0' }}"

- name: Start Galera
  block:
    # TODO
    # Add logic to check if Galera needs bootstrap
    - name: Stop Galera
      service: name=mysql state=stopped

    - name: Start Galera bootstrap
      shell: galera_new_cluster
  when: cluster_master_address == ansible_default_ipv4.address and galera_bootstrap

- name: Start Galera
  service: name=mysql state=started enabled=yes
  when: cluster_master_address != ansible_default_ipv4.address
